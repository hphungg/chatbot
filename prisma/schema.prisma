generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @map("_id")
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    name          String
    displayName   String?
    email         String
    emailVerified Boolean @default(false)
    image         String?
    departmentId  String?
    userVerified  Boolean @default(false)
    role          String  @default("employee")
    banned        Boolean @default(false)

    department         Department?    @relation("DepartmentEmployees", fields: [departmentId], references: [id])
    managedDepartments Department[]   @relation("DepartmentManager")
    sessions           Session[]
    accounts           Account[]
    chat               Chat[]
    group              Group[]
    projects           UserProjects[]

    @@unique([email])
    @@map("user")
}

model Department {
    id        String   @id @default(uuid()) @map("_id")
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    name      String
    code      String
    managerId String?

    manager  User?               @relation("DepartmentManager", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    users    User[]              @relation("DepartmentEmployees")
    projects ProjectDepartment[]

    @@unique([code])
    @@map("department")
}

model Session {
    id        String   @id @map("_id")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    expiresAt DateTime

    token     String
    ipAddress String?
    userAgent String?
    userId    String
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([token])
    @@map("session")
}

model Account {
    id        String   @id @map("_id")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?

    @@map("account")
}

model Verification {
    id        String   @id @map("_id")
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
    expiresAt DateTime

    identifier String
    value      String

    @@map("verification")
}

model Chat {
    id        String   @id @map("_id")
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    title   String
    userId  String
    groupId String?

    user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    group   Group?    @relation(fields: [groupId], references: [id], onDelete: Cascade)
    message Message[]

    @@map("chat")
}

model Group {
    id        String   @id @default(uuid()) @map("_id")
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    title     String
    userId    String
    knowledge Json?

    user User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    chat Chat[]

    @@map("group")
}

model Message {
    id        String   @id @default(uuid()) @map("_id")
    createdAt DateTime @default(now())

    chatId      String
    role        String
    parts       Json
    attachments Json

    chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Project {
    id        String   @id @default(uuid()) @map("_id")
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    name      String
    startDate DateTime?
    endDate   DateTime?

    users       UserProjects[]
    departments ProjectDepartment[]

    @@map("project")
}

model UserProjects {
    id        String @id @map("_id")
    userId    String
    projectId String

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@unique([userId, projectId])
    @@map("user_projects")
}

model ProjectDepartment {
    id           String @id @default(uuid()) @map("_id")
    projectId    String
    departmentId String

    project    Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
    department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

    @@unique([projectId, departmentId])
    @@map("project_department")
}
