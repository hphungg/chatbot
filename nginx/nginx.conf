user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 20M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml font/truetype font/opentype 
               application/vnd.ms-fontobject image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;
    
    # Connection limiting per IP
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # Upstream configuration with load balancing
    upstream nextjs_app {
        # Load balancing algorithm: least_conn (best for varying request times)
        # Other options: round_robin (default), ip_hash (session persistence), random
        least_conn;
        
        # Multiple app instances - Docker Compose will create these
        # Docker DNS will resolve 'app' to all running containers
        server app:3000 max_fails=3 fail_timeout=30s weight=1;
        
        # Keepalive connections for better performance
        keepalive 64;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }
    
    # Upstream health check configuration (requires nginx-plus or custom module)
    # For basic health checks, we rely on Docker's healthcheck and max_fails above

    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name digiz.tech;
        
        # For Let's Encrypt verification
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # HTTPS server
    server {
        listen 443 ssl http2;
        server_name digiz.tech;
        
        # SSL Configuration
        ssl_certificate /etc/letsencrypt/live/digiz.tech/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/digiz.tech/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Proxy settings
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Connection limits
        limit_conn conn_limit_per_ip 20;
        
        # Proxy buffering for better performance
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Next upstream on error/timeout (failover)
        proxy_next_upstream error timeout invalid_header http_502 http_503 http_504;
        proxy_next_upstream_tries 3;
        proxy_next_upstream_timeout 30s;

        # Root location
        location / {
            limit_req zone=general burst=20 nodelay;
            proxy_pass http://nextjs_app;
        }

        # API routes with higher rate limit
        location /api/ {
            limit_req zone=api burst=50 nodelay;
            proxy_pass http://nextjs_app;
            # Extended timeouts for API operations
            proxy_read_timeout 120s;
            proxy_send_timeout 120s;
        }

        # Static files caching
        location /_next/static {
            proxy_pass http://nextjs_app;
            proxy_cache_valid 200 60m;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Image optimization
        location /_next/image {
            proxy_pass http://nextjs_app;
            proxy_cache_valid 200 24h;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Favicon
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        # Robots.txt
        location = /robots.txt {
            log_not_found off;
            access_log off;
        }
    }
}
